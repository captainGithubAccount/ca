package com.you.company.rtcpgvd;

import android.content.Context;
import android.graphics.Color;
import android.os.Build;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.RequiresApi;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.ValueShape;
import lecho.lib.hellocharts.view.LineChartView;

public class GrayValueChartView {

    private LineChartView mLineChart;

    private Context mContext;

    private List<PointValue> mPoints;

    private LineChartData lineChartData;

    private View mView;

    private ArrayList<Integer> mColors = new ArrayList<>(Arrays.asList(R.color.color_zone_1,R.color.color_zone_2,
            R.color.color_zone_3,R.color.color_zone_4,R.color.color_zone_5,R.color.color_zone_6,
            R.color.color_zone_7,R.color.color_zone_8,R.color.color_zone_9,R.color.color_zone_10));

    public GrayValueChartView(Context context) {
        mPoints = new ArrayList<>();
        this.mContext = context;
        lineChartData = new LineChartData();
    }

    public View getRootView(){
        return mView;
    }

    public void init(LineChartView lineChartView){
        mLineChart = lineChartView;
        initAxisY();
        initAxisX();
        initLineChart();
    }

    public void addPoint(List<PointValue> pointValues,int chartId){
//        this.mPoints.removeAll(mPoints);
//        this.mPoints.addAll(pointValues);
        Log.i("capture","chartId: "+ chartId);
        insertLineData(pointValues,chartId);
    }

    @Deprecated
    public void show(ViewGroup root){
        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        ViewGroup parent = (ViewGroup) mView.getParent();
        if(parent != null) {
            parent.removeViewInLayout(mView);
        }

        root.addView(mView,params);
    }

    private void initAxisY(){
        Axis axisY = new Axis();  //Y轴
        axisY.setMaxLabelChars(7); //默认是3，只能看最后三个数字
        axisY.setAutoGenerated(true);
        axisY.setName("灰度值");//y轴标注
        axisY.setTextSize(7);//设置字体大小
        lineChartData.setAxisYLeft(axisY);  //Y轴设置在左边
    }

    private void initAxisX(){
        //坐标轴
        Axis axisX = new Axis(); //X轴
        axisX.setHasTiltedLabels(true);
        axisX.setTextColor(Color.WHITE);  //设置字体颜色
        axisX.setName("时间/每秒");  //表格名称
        axisX.setTextSize(7);//设置字体大小
        axisX.setMaxLabelChars(7);  //最多几个X轴坐标
        //axisX.setValues(mAxisValues);  //填充X轴的坐标名称
        lineChartData.setAxisXBottom(axisX); //x 轴在底部
    }

    private void initLineChart() {
        mLineChart.setInteractive(true);
        mLineChart.setZoomType(ZoomType.HORIZONTAL_AND_VERTICAL);
        mLineChart.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        mLineChart.setViewportCalculationEnabled(true);
        mLineChart.setVisibility(View.VISIBLE);
    }

    List<Line> lines = new ArrayList<Line>();

    public void updateShow() {
        lineChartData.setLines(lines);
        mLineChart.setLineChartData(lineChartData);
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    public void insertLineData(List<PointValue> mPoints, int chartId){
        int colorId = mColors.get(chartId);
        Line line = new Line(mPoints).setColor(mContext.getColor(colorId)).setCubic(false);  //折线的颜色
        line.setShape(ValueShape.CIRCLE);//折线图上每个数据点的形状  这里是圆形 （有三种 ：ValueShape.SQUARE  ValueShape.CIRCLE  ValueShape.SQUARE）
        line.setCubic(true);//曲线是否平滑
        line.setFilled(false);//是否填充曲线的面积
		//line.setHasLabels(true);//曲线的数据坐标是否加上备注
        line.setHasLabelsOnlyForSelected(true);//点击数据坐标提示数据（设置了这个line.setHasLabels(true);就无效）
        line.setHasLines(true);//是否用直线显示。如果为false 则没有曲线只有点显示
        line.setHasPoints(false);//是否显示圆点 如果为false 则没有原点只有点显示
        lines.add(line);
    }
}
